/*
 * GetOfferQ63.h
 *
 *  Created on: 2016年11月23日
 *      Author: tla001
 *      title:数据流中的中位数
 *      如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，
 *      那么中位数就是所有数值排序之后位于中间的数值。
 *      如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。
 */

#ifndef GETOFFERQ63_H_
#define GETOFFERQ63_H_
#include "Include.h"
class GetOfferQ63 {
public:
	void Insert(int num) {
		data.push_back(num);
		std::sort(data.begin(), data.end());
	}

	double GetMedian() {
		unsigned int size = data.size();
		if (size & 1) {
			return data[size >> 1];
		} else {
			int left = data[(size >> 1) - 1];
			int right = data[size >> 1];
			return (static_cast<double>(left) + right) / 2;
		}
	}
private:
	vector<int> data;

//	 void Insert(int num)
//	    {
//	        count+=1;
//	        // 元素个数是偶数时,将小顶堆堆顶放入大顶堆
//	        if(count%2==0){
//	            big_heap.push(num);
//	            small_heap.push(big_heap.top());
//	            big_heap.pop();
//	        }
//	        else{
//	            small_heap.push(num);
//	            big_heap.push(small_heap.top());
//	            small_heap.pop();
//	        }
//	    }
//
//	    double GetMedian()
//	    {
//	        if(count&0x1){
//	            return big_heap.top();
//	        }
//	        else{
//	            return double((small_heap.top()+big_heap.top())/2.0);
//	        }
//	    }
//	private:
//	    int count=0;
//	    priority_queue<int, vector<int>, less<int>> big_heap;        // 左边一个大顶堆
//	    priority_queue<int, vector<int>, greater<int>> small_heap;   // 右边一个小顶堆
//	    // 大顶堆所有元素均小于等于小顶堆的所有元素.
};

#endif /* GETOFFERQ63_H_ */
